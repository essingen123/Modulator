export interface NoteHandler {
	noteOn(midi: number, gain: number, ratio: number):void;
	noteOff(midi: number, gain: number): void;
	noteEnd(midi: number): void;
}

class OscNoteHandler implements NoteHandler {
	osc: OscillatorNode;
	outTracker: OutputTracker;
	clones: OscillatorNode[] = [];

	constructor(osc: OscillatorNode) {
		this.osc = osc;
		this.outTracker = new OutputTracker(osc);
	}

	noteOn(midi: number, gain: number, ratio: number):void {
		// Clone, connect and start
		console.log(">>> note on:", midi);
		const osc = this.clone();
		for (const out of this.outTracker.outputs)
			osc.connect(out);
		//TODO should store current list of outputs
		//...in case user connects or disconnects during playback
		this.clones[midi] = osc;
		osc.frequency.value = osc.frequency.value * ratio;
		osc.start();
	}

	noteOff(midi: number, gain: number): void {
		//TODO if ADSR is present, noteEnd will be generated by ADSR module
		console.log("<<< note off:", midi);
		this.noteEnd(midi);
	}

	noteEnd(midi: number): void {
		// Stop and disconnect
		const osc:any = this.clones[midi];
		if (!osc) return;
		osc.stop();
		for (const out of this.outTracker.outputs)
			osc.disconnect(out);
		this.clones[midi] = null;
	}

	clone(): OscillatorNode {
		const osc = this.osc.context.createOscillator();
		osc.frequency.value = this.osc.frequency.value;
		osc.detune.value = this.osc.detune.value;
		osc.type = this.osc.type;
		return osc;
	}

}

export const NoteHandlers = {
	'osc': OscNoteHandler	
};



class OutputTracker {
	outputs: AudioNode[] = [];

	constructor(anode: AudioNode) {
		this.onBefore(anode, 'connect', this.connect);
		this.onBefore(anode, 'disconnect', this.disconnect);
	}

	connect(anode: AudioNode) {
		if (!(anode instanceof AudioNode)) return;
		this.outputs.push(anode);
	}

	disconnect(anode) {
		if (!(anode instanceof AudioNode)) return;
		removeArrayElement(this.outputs, anode);
	}

	onBefore(obj: any, fname: string, funcToCall: Function) {
		const oldf = obj[fname];
		const self = this;
		obj[fname] = function() {
			funcToCall.apply(self, arguments);
			oldf.apply(obj, arguments);
		}
	}
}


export function removeArrayElement(a: any[], e: any): boolean {
	const pos = a.indexOf(e);
	if (pos < 0) return false;	// not found
	a.splice(pos, 1);
	return true;
}